<#
.SYNOPSIS
    ESS Pre-Upgrade Health Checker
.DESCRIPTION
    Performs comprehensive checks before upgrading ESS to ensure system readiness
    Automatically detects deployment structure and adapts health checks accordingly
.NOTES
    Author: Zoe Lai
    Date: 29/07/2025
    Version: 1.0
#>

# Import Core Health Check Module FIRST (infrastructure)
. .\HealthCheckCore.ps1

# Import System modules first (dependencies)
. .\modules\System\HardwareInfo.ps1
. .\modules\System\OSInfo.ps1
. .\modules\System\IISInfo.ps1
. .\modules\System\SQLInfo.ps1
. .\modules\System\SystemInfoOrchestrator.ps1

# Import Detection modules
. .\modules\Detection\ESSDetection.ps1
. .\modules\Detection\WFEDetection.ps1
. .\modules\Detection\DetectionOrchestrator.ps1

# Import Utils modules
. .\modules\Utils\HelperFunctions.ps1

# Import Validation modules
. .\modules\Validation\SystemRequirements.ps1
. .\modules\Validation\InfrastructureValidation.ps1
. .\modules\Validation\ESSValidation.ps1
. .\modules\Validation\ValidationOrchestrator.ps1

# Import Configuration (uses dynamic system information)
. .\Config.ps1

# Import Report Generator
. .\ReportGenerator.ps1

# Initialize configuration after all modules are loaded
Initialize-ESSHealthCheckerConfiguration

# Ensure detection results are globally available
if ($global:ESSConfig -and $global:ESSConfig.DetectionResults) {
    $global:DetectionResults = $global:ESSConfig.DetectionResults
}

function Start-ESSHealthChecks {
    <#
    .SYNOPSIS
        Starts the ESS Health Check process
    .DESCRIPTION
        Initializes configuration and runs all health checks
    #>
    [CmdletBinding()]
    param ()

    try {
        Write-Host "Starting ESS Pre-Upgrade Health Checks..." -ForegroundColor Cyan

        # Get system information from configuration
        $global:SystemInfo = $global:ESSConfig.SystemInfo

        # Display system information summary
        Show-SystemInfoSummary

        # Run system validation checks
        Start-SystemValidation
        
        # Run additional validation checks
        
        # Run API health checks for ESS instances
        Start-APIHealthChecks

        # Generate report based on results
        Write-Host "Generating ESS Pre-Upgrade Health Check Report..." -ForegroundColor Green
        $reportPath = New-HealthCheckReport -Results $global:HealthCheckResults

        Write-Host "`nHealth Checks completed successfully!" -ForegroundColor Green
        Write-Host "Report generated at: $reportPath" -ForegroundColor Cyan
        return $reportPath
    } 
    catch {
        Write-Error "An error occurred during the ESS Health Check: $_"
        throw
    }
}

function Show-SystemInfoSummary {
    <#
    .SYNOPSIS
        Displays a concise summary of gathered system information
    #>
    [CmdletBinding()]
    param ()

    Write-Host "`n=== System Information Summary ===" -ForegroundColor Magenta

    $sysInfo = $global:SystemInfo

    # Basic System Info
    Write-Host "Computer Name: $($sysInfo.ComputerName)" -ForegroundColor White
    Write-Host "Operating System: $($sysInfo.OS.Caption) $(if ($sysInfo.OS.IsServer) { '(Server)' } else { '(Client)' })" -ForegroundColor White
    Write-Host "Memory: $($sysInfo.Hardware.TotalPhysicalMemory) GB" -ForegroundColor White
    Write-Host "CPU Cores: $($sysInfo.Hardware.TotalCores)" -ForegroundColor White
    Write-Host "IIS Installed: $(if ($sysInfo.IIS.IsInstalled) { 'Yes' } else { 'No' })" -ForegroundColor White

    # Deployment Info
    if ($global:DetectionResults) {
        Write-Host "ESS Installed: $(if ($global:DetectionResults.ESSInstances.Count -gt 0) { 'Yes' } else { 'No' })" -ForegroundColor White
        Write-Host "WFE Installed: $(if ($global:DetectionResults.WFEInstances.Count -gt 0) { 'Yes' } else { 'No' })" -ForegroundColor White
        Write-Host "Deployment Type: $($global:DetectionResults.DeploymentType)" -ForegroundColor White
    } else {
        Write-Host "ESS Installed: Unknown" -ForegroundColor White
        Write-Host "WFE Installed: Unknown" -ForegroundColor White
        Write-Host "Deployment Type: Unknown" -ForegroundColor White
    }
    
    Write-Host "=================================" -ForegroundColor Magenta
}

function Start-APIHealthChecks {
    <#
    .SYNOPSIS
        Runs API health checks for all discovered ESS instances
    .DESCRIPTION
        Discovers ESS sites and tests their health check API endpoints
        to gather comprehensive health information for reporting
    #>
    [CmdletBinding()]
    param ()

    try {
        Write-Host "`nStarting API Health Checks..." -ForegroundColor Cyan
        
        # Discover ESS sites and URLs
        $discoveredSites = Discover-ESSSiteURLs
        
        if ($discoveredSites.Count -gt 0) {
            Write-Host "Found $($discoveredSites.Count) site(s) with ESS installations" -ForegroundColor Green
            
            $totalTests = 0
            $successfulTests = 0
            
            foreach ($site in $discoveredSites) {
                Write-Host "Testing site: $($site.SiteName)" -ForegroundColor White
                
                foreach ($ess in $site.ESSInstallations) {
                    $totalTests++
                    Write-Host "  Testing ESS: $($ess.ApplicationPath)" -ForegroundColor Gray
                    
                    try {
                        # Test the health check endpoint
                        $testResult = Test-ESSHealthCheckEndpoint -SiteName $site.SiteName -ApplicationPath $ess.ApplicationPath
                        
                        if ($testResult.HealthCheckWorking) {
                            Write-Host "    ✓ Endpoint accessible" -ForegroundColor Green
                            
                            # Get detailed health check information
                            $healthCheck = Get-ESSHealthCheckViaAPI -SiteName $site.SiteName -ApplicationPath $ess.ApplicationPath
                            
                            # Store the result for reporting
                            Add-APIHealthCheckResult -SiteName $site.SiteName -ApplicationPath $ess.ApplicationPath -HealthCheckData $healthCheck
                            
                            # Add to health check results
                            Add-HealthCheckResult -Category "ESS API" -Check "Health Check API - $($ess.ApplicationPath)" -Status "PASS" -Message "Successfully retrieved health check information via API for $($ess.ApplicationPath)"
                            
                            $successfulTests++
                            
                        } else {
                            Write-Host "    ✗ Endpoint not accessible" -ForegroundColor Red
                            Add-HealthCheckResult -Category "ESS API" -Check "Health Check API - $($ess.ApplicationPath)" -Status "FAIL" -Message "Health check endpoint is not accessible for $($ess.ApplicationPath)"
                        }
                        
                    } catch {
                        Write-Host "    ✗ Error: $_" -ForegroundColor Red
                        Add-HealthCheckResult -Category "ESS API" -Check "Health Check API - $($ess.ApplicationPath)" -Status "FAIL" -Message "Exception during health check test occurred"
                    }
                }
            }
            
            Write-Host "`nAPI Health Checks completed: $successfulTests/$totalTests successful" -ForegroundColor $(if ($successfulTests -eq $totalTests) { "Green" } else { "Yellow" })
            
        } else {
            Write-Host "No ESS sites discovered for API health checks" -ForegroundColor Yellow
            Add-HealthCheckResult -Category "ESS API" -Check "Site Discovery" -Status "WARNING" -Message "No ESS sites discovered for API testing"
        }
        
    } catch {
        Write-Error "An error occurred during API health checks: $_"
        Add-HealthCheckResult -Category "ESS API" -Check "API Health Checks" -Status "FAIL" -Message "Exception during API health checks occurred"
    }
}
